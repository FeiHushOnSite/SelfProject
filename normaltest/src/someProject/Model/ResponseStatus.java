package someProject.Model;

public enum ResponseStatus {

    OK(200),

    DATA_ERROR(400),
    UNAUTHORIZED(401),
    SMS_ERROR(402),
    SMS_ERROR_DO_NOT_DECREASE(4020),
    INVALID_CREDENTIALS(403),
    DATA_NOT_FOUND(404),
    TOKEN_EXPIRED(405),
    USER_BLOCKED(406),
    DEVICE_BLOCKED(407),
    LOGGED_ELSEWHERE(408),
    USER_ALREADY_EXISTS(409),
    DEVICE_ALREADY_EXISTS(410),
    USER_BANNED(411),
    FILE_NOT_FOUND(412),
    CANNOT_PARSE_IMAGE(413),
    USER_NOT_FOUND(414),
    UPDATE_NEEDED(415),
    VERIFY_PIN_BANNED(416),
    IL_USER_BANNED(417),
    IL_INVALID_CREDENTIALS(418),
    DEVICE_NOT_FOUND(419),
    AF_DENIED(420),
    SMS_LIMIT_EXCEEDED(421),
    USER_NOT_ELIGIBLE(422),
    CONTRACT_ALREADY_CONFIRMED(423),
    MESSAGE_FOREIGN(424),
    MESSAGE_ACTIVE(425),
    MESSAGE_ALREADY_DELETED(426),
    MESSAGE_ALREADY_READ(427),
    CONTRACT_EXPIRED(428),
    SUBMIT_AF_IMAGES_NOT_UPLOADED(429),
    INCORRECT_TERMS_CONDITIONS_VERSION(430),
    MESSAGE_CANNOT_BE_MARKED_AS_READ(431),
    ER_NOT_AVAILABLE(432),
    USER_IS_UNREGISTERED(433),
    EXCEED_DEVICE_USAGES(434),
    CONTRACT_CANNOT_BE_CONFIRMED(435),
    PAYMENT_NOT_SUPPORTED(436),
    AUTHORIZATION_REQUIRED(437),
    NO_AUTHORIZATION_REQUIRED(4400),
    VENDOR_CONNECTION_FAILED(4401),
    SESSION_EXPIRED(438),
    INVALID_INVOICE_AMOUNT(439),
    WRONG_CAPTCHA_CODE(454),
    CAPTCHA_EXPIRED(455),
    EXCEED_CAPTCHA_ATTEMPTS(456),
    EXCEPTION_GET_HCPRELEASEDBILL(457),
    HCPAY_IS_OVERDUE(458),
    HCPAY_CLOSED_TO_DUEDATE(459),
    FAILED_TO_REQUEST_HCPAY_REPAYMENT(460),
    SUCCESS_WITH_NO_DATA(461),
    REQUEST_TIME_DURATION_EXPIRED(462),
    SEND_INVOICE_DETAIL_FAILED(463),
    EXCEPTION_GET_HCPUNRELEASED_BILL(464),
    FAILED_TO_GET_HCP_HISTORY_BILL(471),
    FILE_SIZE_LIMIT_EXCEEDED(481),
    UNRECOGNIZED_STATUS_CODE(499),

    INTERNAL_SERVER_ERROR(500),
    HCCN_SERVICE_IO_ERROR(501),
    SERVER_UNAVAILABLE(503),
    CANNOT_PARSE_SERVER_RESPONSE(504),
    CONNECTION_TIMEOUT(505);

    private final int code;

    ResponseStatus(int code) {
        this.code = code;
    }

    public static ResponseStatus findByCode(int code) {
        for (ResponseStatus responseStatus : values()) {
            if (responseStatus.getCode() == code) {
                return responseStatus;
            }
        }
        return UNRECOGNIZED_STATUS_CODE;
    }

    public int getCode() {
        return code;
    }
}

